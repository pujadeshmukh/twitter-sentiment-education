# if not an error
if (!inherits(try_error, "error"))
y = tolower(x)
# result
as.character(y)
}
sapply(stream$text[range], tryTolower)
stream <- read.table(file="../data/tweets.txt", header=F, sep="\t",
encoding="UTF-8",
fill=T, allowEscapes=T,
col.names=c("id","date","text","lang","lat","lng","country","code"))
range <- 1:50
stream[range,"text"] <- sapply(stream$text[range], clear.text)
stream[range,"text"] <- sapply(stream$text[range], tryTolower)
stream[range,"text"]
stream[range]$text
stream <- read.table(file="../data/tweets.txt", header=F, sep="\t",
encoding="UTF-8",
fill=T, allowEscapes=T,
col.names=c("id","date","text","lang","lat","lng","country","code"))
range <- 1:50
stream$text[range]
sapply(stream$text[range], clear.text)
sapply(stream$text[range], tryTolower)
range <- 1:50
stream$text[range] <- sapply(stream$text[range], clear.text)
stream$text[range] <- sapply(stream$text[range], tryTolower)
s <- sapply(stream$text[range], clear.text)
class(s)
s <- sapply(stream$text[range], tryTolower)
s
sapply(stream$text[range], tryTolower)
stream <- read.table(file="../data/tweets.txt", header=F, sep="\t",
encoding="UTF-8",
fill=T, allowEscapes=T,
col.names=c("id","date","text","lang","lat","lng","country","code"))
s <- sapply(stream$text[range], tryTolower)
s
s <- sapply(stream$text[range], clear.text)
s <- sapply(s, tryTolower)
s
stream$text[range] <- s
s
as.character(s)
s <- as.character(sapply(s, tryTolower))
s
stream <- read.table(file="../data/tweets.txt", header=F, sep="\t",
encoding="UTF-8",
fill=T, allowEscapes=T,
col.names=c("id","date","text","lang","lat","lng","country","code"))
range <- 1:50
stream$text[range] <- sapply(stream$text[range], clear.text)
stream$text[range] <- as.character(sapply(stream$text[range], tryTolower))
View(stream)
stream <- read.table(file="../data/tweets.txt", header=F, sep="\t",
encoding="UTF-8",
fill=T, allowEscapes=T,
col.names=c("id","date","text","lang","lat","lng","country","code"))
stream$text[range] <- as.character(sapply(stream$text[range], clear.text))
stream$text[range] <- as.character(sapply(stream$text[range], tryTolower))
View(stream)
stream <- read.table(file="../data/tweets.txt", header=F, sep="\t",
encoding="UTF-8",
fill=T, allowEscapes=T,
col.names=c("id","date","text","lang","lat","lng","country","code"))
stream$text[range] <- character(sapply(stream$text[range], clear.text))
stream$text[range] <- as.character(sapply(stream$text[range], clear.text))
stream$text[range]
as.character(stream$text)
stream$text <- as.character(stream$text)
range <- 1:50
stream$text[range] <- sapply(stream$text[range], clear.text)
stream$text[range] <- sapply(stream$text[range], tryTolower)
View(stream)
stream <- read.table(file="../data/tweets.txt", header=F, sep="\t",
encoding="UTF-8",
fill=T, allowEscapes=T,
col.names=c("id","date","text","lang","lat","lng","country","code"))
stream$text <- as.character(stream$text)
range <- 1:5000
stream$text[range] <- sapply(stream$text[range], clear.text)
stream$text[range] <- sapply(stream$text[range], tryTolower)
range <- 5001:10000
stream$text[range] <- sapply(stream$text[range], clear.text)
stream$text[range] <- sapply(stream$text[range], tryTolower)
range <- 10001:15000
stream$text[range] <- sapply(stream$text[range], clear.text)
stream$text[range] <- sapply(stream$text[range], tryTolower)
range <- 15001:20000
stream$text[range] <- sapply(stream$text[range], clear.text)
stream$text[range] <- sapply(stream$text[range], tryTolower)
range <- 20001:25000
stream$text[range] <- sapply(stream$text[range], clear.text)
stream$text[range] <- sapply(stream$text[range], tryTolower)
range <- 25001:30357
stream$text[range] <- sapply(stream$text[range], clear.text)
stream$text[range] <- sapply(stream$text[range], tryTolower)
stream <- na.omit(stream)
write.table(stream, file="../data/tweets1.txt", row.names=F, col.names=F, sep="\t")
rm(list=ls(all=TRUE))
gc(reset=TRUE)
set.seed(12345)
##
## Required packages
##
require(ggplot2)
require(rworldmap)
source("sentiment.R")
##
## Reading stream
##
stream <- read.table(file="../data/tweets.txt", header=F, sep="\t",
encoding="UTF-8",
fill=T, allowEscapes=T,
col.names=c("id","date","text","lang","lat","lng","country","code"))
stream <- na.omit(stream)
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
len <- nrow(stream)
len %/% 10000
len %/% 5000
(len %/% 5000) + 1
N <- (nrow(stream) %/% 5000) + 1
rm(len)
K <- 5000
N <- (nrow(stream) %/% K) + 1
for(i in 1:N){
start  <- (i-1)*K + 1
finish <- i*K
if(i==N) finish <- nrow(stream)
cat(start, finish)
}
for(i in 1:N){
start  <- (i-1)*K + 1
finish <- i*K
if(i==N) finish <- nrow(stream)
cat(start, finish, "\n")
}
K <- 5000
N <- (nrow(stream) %/% K) + 1
for(i in 1:N){
start  <- (i-1)*K + 1
finish <- i*K
if(i==N) finish <- nrow(stream)
stream$score[start:finish] <- score.sentiment(stream$text[start:finish], .progress='text')[,2]
}
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
pos.words <- readLines("../data/positive_words.txt")
neg.words <- readLines("../data/negative_words.txt")
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
score.sentiment(stream$text[start:finish])[,2]
stream <- read.table(file="../data/tweets.txt", header=F, sep="\t",
encoding="UTF-8",
fill=T, allowEscapes=T,
col.names=c("id","date","text","lang","lat","lng","country","code"))
stream <- na.omit(stream)
stream$score <- NA
K <- 5000
N <- (nrow(stream) %/% K) + 1
for(i in 1:N){
start  <- (i-1)*K + 1
finish <- i*K
if(i==N) finish <- nrow(stream)
stream$score[start:finish] <- score.sentiment(stream$text[start:finish])[,2]
}
View(stream)
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
rm(list=ls(all=TRUE))
gc(reset=TRUE)
set.seed(12345)
##
## Required packages
##
require(ggplot2)
require(rworldmap)
source("sentiment.R")
##
## Reading stream
##
stream <- read.table(file="../data/tweets.txt", header=F, sep="\t",
encoding="UTF-8",
fill=T, allowEscapes=T,
col.names=c("id","date","text","lang","lat","lng","country","code"))
stream <- na.omit(stream)
stream$score <- NA
K <- 5000
N <- (nrow(stream) %/% K) + 1
for(i in 1:N){
start  <- (i-1)*K + 1
finish <- i*K
if(i==N) finish <- nrow(stream)
stream$score[start:finish] <- score.sentiment(stream$text[start:finish])[,2]
}
score.sentiment(stream$text[start:finish])
score.sentiment(stream$text[1:10])
score.sentiment(stream$text[1:10])[,1]
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
stream <- read.table(file="../data/tweets.txt", header=F, sep="\t",
encoding="UTF-8",
fill=T, allowEscapes=T,
col.names=c("id","date","text","lang","lat","lng","country","code"))
stream <- na.omit(stream)
stream$score <- NA
K <- 5000
N <- (nrow(stream) %/% K) + 1
for(i in 1:N){
start  <- (i-1)*K + 1
finish <- i*K
if(i==N) finish <- nrow(stream)
stream$score[start:finish] <- score.sentiment(stream$text[start:finish])
}
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
stream$score[stream$score>  2] <- +2
stream$score[stream$score< -2] <- -2
stream$score <- as.factor(stream$score)
world <- fortify(getMap(resolution="low"))
p <- ggplot()
p <- p + geom_polygon(data=world, aes(x=long, y=lat, group=group),
colour="#888888", fill="#ddddee", alpha=0.6)
p <- p + geom_point(data=stream, aes(x=lng,y=lat,colour=score), alpha=0.8)
p <- p + scale_colour_manual(name="Оценка",
values=c("red","orange","#aaaaaa","#99dd99","#00dd00"))
p + xlab("Долгота, градусы") + ylab("Широта, градусы")
topnames <- names(sort(table(stream$code), decreasing=T)[1:3])
stream$top <- as.character(stream$code)
stream$top[!(stream$code %in% topnames)] <- "Other"
h <- ggplot()
h <- h + geom_histogram(data=stream, aes(x=score)) + facet_grid(.~top)
h
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
require(sentiment)
install.packages("sentiment")
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/geonames.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/geonames.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/geonames.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/geonames.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
gsub("[[:punct:]]", "", "Hello, world!")
gsub("[[:punct:]^,]", "", "Hello, world!")
gsub("[^[:punct:]]", "", "Hello, world!")
gsub("[^,[:punct:]]", "", "Hello, world!")
gsub("[^,][:punct:]", "", "Hello, world!")
gsub("[^,][[:punct:]]", "", "Hello, world!")
gsub("[[:punct:]]", "", "Hello, world!")
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
gsub("[[:space:]]{2,}", "!", "Hello, world!")
gsub("[[:space:]]{2,}", "!", "Hello,  world!")
gsub("[[:space:]]{2,}", "!", "Hello,  \tworld!")
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
clear.location("Hello, world!")
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
clear.location("Hello, world!")
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
clear.location("Hello, world!")
clear.location("Hello, \nworld!\t  ")
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
clear.location("Hello, \nworld!\t  ")
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
clear.location("Hello, \nworld!\t  ")
clear.location("Hello, \nworld!\t  #minsk")
clear.location("Hello, @me:   \nworld!\t  #minsk")
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
clear.location("Hello, @me:   \nworld!\t  #minsk")
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/utils.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
switch(Sys.info()[['sysname']],
Linux  = {require(doMC)
registerDoMC(detectCores())})
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
rm(list=ls(all=TRUE))
gc(reset=TRUE)
set.seed(12345)
##
## If running on Linux machine - use multicore
##
switch(Sys.info()[['sysname']],
Linux  = {require(doMC)
registerDoMC(detectCores())})
Sys.info()[['sysname']]
switch(Sys.info()[['sysname']],
Linux  = {require(doMC)
registerDoMC(detectCores())})
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/sentiment.R')
process("asdf")
args  <- commandArgs(TRUE)
query <- ifelse(!is.na(args[1]), args[1], "education,university,professor,college")
lang  <- ifelse(!is.na(args[2]), args[2], "en")
##
## Processing function for raw tweets
##
process <- function(x){
if(nchar(x)>0){
json <- fromJSON(x)
if(!is.null(json$text)){
json$text <- clear.text(json$text)
}
else
return(NULL)
if(nchar(json$text,allowNA=T)>0 & json$user$lang==lang){
##
## Basic data.frame
##
jdf <- data.frame(id=json$id_str,
created=json$created_at,
text=json$text,
lang=json$user$lang,
lat=NA,
lng=NA,
country=NA,
code=NA)
##
## Geo coded tweet
##
if(!is.null(json$coordinates)){
jdf$lat <- json$coordinates$coordinates[2]
jdf$lng <- json$coordinates$coordinates[1]
geo <- geo.names(jdf$lat,jdf$lng)
if(nchar(geo$country)>0){
jdf$country <- geo$country
jdf$code    <- geo$code
}
}
##
## Not geo-coded tweet
##
else{
loc <- ifelse(is.character(json$user$location), json$user$location, "")
coords <- geo.coordinates(loc)
if(nchar(coords$country)>0){
jdf$lat <- as.numeric(coords$lat)
jdf$lng <- as.numeric(coords$lng)
jdf$country <- as.character(coords$country)
jdf$code    <- as.character(coords$code)
}
}
# To lower case conversion
jdf$text <- sapply(jdf$text, tryTolower)
jdf$text <- as.character(jdf$text)
jdf <- na.omit(jdf)
if(nrow(jdf)>0){
# Counting processed tweets
i <- attr(process, "count")
i <- ifelse(is.null(i), 1, i)
attr(process, "count") <<- i+1
# Print to console
cat(i, ":", jdf$text, "(", as.character(jdf$code), ")", "\n")
# Add to file
write.table(jdf, file="../data/tweets.txt", append=T, row.names=F, col.names=F, sep="\t")
}
}
}
return(NULL)
}
process("asdf")
require(RJSONIO)
process("asdf")
fromJSON("asdf")
?fromJSON
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/stream.R')
fromJSON("asdf")
isValidJSON("asdf")
isValidJSON("asdf",TRUE)
##
## Processing function for raw tweets
##
process <- function(x){
if(nchar(x)>0){
## Checks if JSON
if(isValidJSON(x, TRUE)){
json <- fromJSON(x)
}
else
return(NULL)
## Checks the 'text' field
if(!is.null(json$text)){
json$text <- clear.text(json$text)
}
else
return(NULL)
if(nchar(json$text,allowNA=T)>0 & json$user$lang==lang){
##
## Basic data.frame
##
jdf <- data.frame(id=json$id_str,
created=json$created_at,
text=json$text,
lang=json$user$lang,
lat=NA,
lng=NA,
country=NA,
code=NA)
##
## Geo coded tweet
##
if(!is.null(json$coordinates)){
jdf$lat <- json$coordinates$coordinates[2]
jdf$lng <- json$coordinates$coordinates[1]
geo <- geo.names(jdf$lat,jdf$lng)
if(nchar(geo$country)>0){
jdf$country <- geo$country
jdf$code    <- geo$code
}
}
##
## Not geo-coded tweet
##
else{
loc <- ifelse(is.character(json$user$location), json$user$location, "")
coords <- geo.coordinates(loc)
if(nchar(coords$country)>0){
jdf$lat <- as.numeric(coords$lat)
jdf$lng <- as.numeric(coords$lng)
jdf$country <- as.character(coords$country)
jdf$code    <- as.character(coords$code)
}
}
# To lower case conversion
jdf$text <- sapply(jdf$text, tryTolower)
jdf$text <- as.character(jdf$text)
jdf <- na.omit(jdf)
if(nrow(jdf)>0){
# Counting processed tweets
i <- attr(process, "count")
i <- ifelse(is.null(i), 1, i)
attr(process, "count") <<- i+1
# Print to console
cat(i, ":", jdf$text, "(", as.character(jdf$code), ")", "\n")
# Add to file
write.table(jdf, file="../data/tweets.txt", append=T, row.names=F, col.names=F, sep="\t")
}
}
}
return(NULL)
}
isValidJSON("asdf",TRUE)
process("asdf")
getURL("https://stream.twitter.com/1/statuses/filter.json",
userpwd="rredmode:chalera-twitter",
write=process,
postfields=paste0("track=",query))
source('~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/stream.R')
rm(list=ls(all=TRUE))
gc(reset=TRUE)
set.seed(12345)
##
## Required packages
##
require(ggplot2)
require(rworldmap)
source("sentiment.R")
##
## Reading stream
##
stream <- read.table(file="../data/tweets.txt", header=F, sep="\t",
encoding="UTF-8",
fill=T, allowEscapes=T,
col.names=c("id","date","text","lang","lat","lng","country","code"))
stream <- na.omit(stream)
stream$score <- NA
K <- 5000
N <- (nrow(stream) %/% K) + 1
for(i in 1:N){
start  <- (i-1)*K + 1
finish <- i*K
if(i==N) finish <- nrow(stream)
stream$score[start:finish] <- score.sentiment(stream$text[start:finish])
}
rm(list(K,N,i,start,finish))
rm(list("K","N","i","start","finish"))
?rm
ls()
rm(list=list("K","N","i","start","finish"))
list("K","N","i","start","finish")
rm(list=c("K","N","i","start","finish"))
stream$score[stream$score>  2] <- +2
stream$score[stream$score< -2] <- -2
stream$score <- as.factor(stream$score)
world <- fortify(getMap(resolution="low"))
p <- ggplot()
p <- p + geom_polygon(data=world, aes(x=long, y=lat, group=group),
colour="#888888", fill="#ddddee", alpha=0.6)
p <- p + geom_point(data=stream, aes(x=lng,y=lat,colour=score), alpha=0.8)
p <- p + scale_colour_manual(name="Оценка",
values=c("red","orange","#aaaaaa","#99dd99","#00dd00"))
p <- p + xlab("Долгота, градусы") + ylab("Широта, градусы")
p
Sys.getlocale()
p + theme_bw()
