{
    "contents" : "#!/usr/bin/Rscript\n\n##\n## Loading libraries & settings\n##\nrequire(RCurl)\nrequire(RJSONIO)\n\nsource(\"utils.R\")\n\nSys.setlocale(locale=\"C\")\n\nargs  <- commandArgs(TRUE)\nquery <- ifelse(!is.na(args[1]), args[1], \"education,university,professor,college\")\nlang  <- ifelse(!is.na(args[2]), args[2], \"en\")\n\n##\n## define error handling function when trying tolower\n##\ntryTolower <- function(x)\n{\n  # create missing value\n  y = NA\n  # tryCatch error\n  try_error = tryCatch(tolower(x), error=function(e) e)\n  # if not an error\n  if (!inherits(try_error, \"error\"))\n    y = tolower(x)\n  # result\n  as.character(y)\n}\n\n##\n## Processing function\n##\nprocess <- function(x){\n  if(nchar(x)>0){\n    json <- fromJSON(x)\n    json$text <- clear.text(json$text)\n    \n    if(nchar(json$text,allowNA=T)>0 & json$user$lang==lang){\n      ##\n      ## Basic data.frame\n      ##\n      jdf <- data.frame(id=json$id_str,\n                        created=json$created_at,\n                        text=json$text,\n                        lang=json$user$lang,\n                        lat=NA,\n                        lng=NA,\n                        country=NA,\n                        code=NA)\n      ##\n      ## Geo code\n      ##\n      if(!is.null(json$coordinates)){\n        jdf$lat <- json$coordinates$coordinates[2]\n        jdf$lng <- json$coordinates$coordinates[1]\n        geo <- geo.names(jdf$lat,jdf$lng)\n        \n        if(nchar(geo$country)>0){\n          jdf$country <- geo$country\n          jdf$code <- geo$code\n        }\n      }\n      else{\n        loc <- ifelse(is.character(json$user$location), json$user$location, \"\")\n        coords <- geo.coordinates(loc)\n        if(nchar(coords$country)>0){\n          jdf$lat <- as.numeric(coords$lat)\n          jdf$lng <- as.numeric(coords$lng)\n          jdf$country <- as.character(coords$country)\n          jdf$code <- as.character(coords$code)\n        }\n      }\n      \n      # To lower case conversion\n      jdf$text <- sapply(jdf$text, tryTolower)\n      jdf$text <- as.character(jdf$text)\n      jdf <- na.omit(jdf)\n\n      if(nrow(jdf)>0){\n        # Counting processed tweets\n        i <- attr(process, \"count\")\n        i <- ifelse(is.null(i), 1, i)\n        attr(process, \"count\") <<- i+1\n        \n        # Print to console\n        cat(i, \":\", jdf$text, \"(\", as.character(jdf$code), \")\", \"\\n\")\n        # Add to file\n        write.table(jdf, file=\"../data/tweets.txt\", append=T, row.names=F, col.names=F, sep=\"\\t\")\n      }\n    }\n  }\n}\n\n##\n## Request to Twitter Streaming API\n##\n\ngetURL(\"https://stream.twitter.com/1/statuses/filter.json\", \n       userpwd=\"rredmode:chalera-twitter\",\n       write=process,\n       postfields=paste0(\"track=\",query))\n",
    "created" : 1364888868465.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2679026080",
    "id" : "2695B76D",
    "lastKnownWriteTime" : 1364927815,
    "path" : "~/docs/Dropbox/Docs/study/Publications/2013/2013-03-IOT/code/stream.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}